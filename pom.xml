<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.flagship</groupId>
    <artifactId>rama-parent</artifactId>

	<name>rama-parent</name>
    <version>1.0-SNAPSHOT</version>
	<packaging>pom</packaging>

    <modules>
        <module>rama</module>
        <module>console-lib</module>
    </modules>


    <prerequisites>
        <!-- required by Scala plugin -->
        <maven>3.0.4</maven>
    </prerequisites>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <scala.version>2.10.2</scala.version>
        <java.level>1.6</java.level>
        <flagship.version>1.0-SNAPSHOT</flagship.version>
    </properties>

	<dependencies>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <version>${scala.version}</version>
        </dependency>
    </dependencies>

    <dependencyManagement>
    <dependencies>
        <!-- test dependencies -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>

        <!-- flagship api -->
        <dependency>
            <groupId>org.flagship</groupId>
            <artifactId>console-lib</artifactId>
            <version>${flagship.version}</version>
        </dependency>
        <dependency>
            <groupId>org.flagship</groupId>
            <artifactId>rama</artifactId>
            <version>${flagship.version}</version>
        </dependency>

        <!-- text gui -->
        <dependency>
            <groupId>com.googlecode.lanterna</groupId>
            <artifactId>lanterna</artifactId>
            <version>2.1.5</version>
        </dependency>

        <dependency>
            <groupId>org.fusesource.jansi</groupId>
            <artifactId>jansi</artifactId>
            <version>1.11</version>
        </dependency>

        <!-- scala libraries -->
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <version>${scala.version}</version>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-swing</artifactId>
            <version>${scala.version}</version>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-compiler</artifactId>
            <version>${scala.version}</version>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-reflect</artifactId>
            <version>${scala.version}</version>
        </dependency>

        <!-- logging -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.0.13</version>
        </dependency>
    </dependencies>
    </dependencyManagement>

    <build>
    <plugins>
        <!--
            Scala compiler plugin
        -->
        <plugin>
            <groupId>net.alchim31.maven</groupId>
            <artifactId>scala-maven-plugin</artifactId>
            <version>3.1.3</version>
            <executions>
                <!-- Compile at process-resources to support mixed Java/Scala -->
                <execution>
                    <id>scala-compile</id>
                    <phase>process-resources</phase>
                    <goals>
                        <goal>add-source</goal>
                        <goal>compile</goal>
                    </goals>
                </execution>
                <execution>
                    <id>scala-test-compile</id>
                    <phase>process-test-resources</phase>
                    <goals>
                        <goal>testCompile</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <scalaVersion>${scala.version}</scalaVersion>

                <!-- Allow mixed Java and Scala -->
                <compileOrder>mixed</compileOrder>

                <!--
                    Only re-compile sources which changed.

                    The scala plugin will be used to incrementally compile both Java and Scala sources.
                    The default Maven compiler plugin will not be used.
                -->
                <recompileMode>incremental</recompileMode>

                <source>${java.level}</source>
                <target>${java.level}</target>

                <!-- Output Scala compiler warnings -->
                <args>
                    <arg>-deprecation</arg>
                    <arg>-feature</arg>
                </args>

                <!-- Output Java compiler warnings -->
                <javacArgs>
                    <javacArg>-Xlint:unchecked</javacArg>
                    <javacArg>-Xlint:deprecation</javacArg>
                </javacArgs>

                <!--
                    These settings were used by nbscala, not sure if needed
                -->
                <!--<jvmArgs>
                    <jvmArg>-Xbootclasspath/p:${settings.localRepository}/org/scala-lang/scala-reflect/${scala.version}/scala-reflect-${scala.version}.jar</jvmArg>
                    <jvmArg>-Xms64m</jvmArg>
                    <jvmArg>-Xmx512m</jvmArg>
                    <jvmArg>-Xss64m</jvmArg> &lt;!&ndash; to avoid StackOverFlowError &ndash;&gt;
                </jvmArgs>
                <args>
                    <arg>-target:jvm-1.6</arg>
                    <arg>-deprecation</arg>
                    <arg>-Xmax-classfile-name</arg>
                    <arg>143</arg> &lt;!&ndash; to avoid 'error: File name too long' in Linux/ecryptfs &ndash;&gt;
                </args>-->
            </configuration>
        </plugin>

        <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>animal-sniffer-maven-plugin</artifactId>
        </plugin>
    </plugins>


    <pluginManagement>
    <plugins>
    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.14</version>
    </plugin>


    <!--
    Check that no APIs newer than the JRE specified are used.
-->
    <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>animal-sniffer-maven-plugin</artifactId>
        <version>1.9</version>
        <executions>
            <execution>
                <id>check-java-version</id>
                <phase>verify</phase>
                <goals>
                    <goal>check</goal>
                </goals>
                <configuration>
                    <signature>
                        <groupId>org.codehaus.mojo.signature</groupId>
                        <artifactId>java16</artifactId>
                        <version>1.0</version>
                    </signature>
                </configuration>
            </execution>
        </executions>
    </plugin>
    </plugins>
    </pluginManagement>
    </build>
</project>